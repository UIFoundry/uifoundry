{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "social-icons-field",
  "type": "registry:block",
  "title": "Social Icons Field",
  "dependencies": [
    "react",
    "payload"
  ],
  "registryDependencies": [
    "@uifoundry/social-icons"
  ],
  "files": [
    {
      "path": "registry/payload/fields/socialLinks/config.ts",
      "content": "import { socialIcons } from \"@/registry/default/ui/social-icons\";\nimport selectEnumField from \"@/registry/default/lib/fields/selectEnumField/config\";\nimport type { ArrayField } from \"@/registry/default/lib/fields\";\nimport type { Field } from \"payload\";\n\nexport type SocialIconKey = keyof typeof socialIcons;\n\nexport default function socialLinksField(props?: Partial<ArrayField>): Field {\n\treturn {\n\t\tname: \"socialLinks\",\n\t\ttype: \"array\",\n\t\trequired: true,\n\t\tdefaultValue: [],\n\t\tfields: [\n\t\t\t{\n\t\t\t\tname: \"href\",\n\t\t\t\ttype: \"text\",\n\t\t\t\trequired: true,\n\t\t\t\tdefaultValue: \"\",\n\t\t\t\tadmin: {\n\t\t\t\t\tplaceholder: \"https://x.com/1234\",\n\t\t\t\t\twidth: \"50%\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t...selectEnumField(socialIcons, {\n\t\t\t\t\tname: \"icon\",\n\t\t\t\t\tuseKeyAsValue: true,\n\t\t\t\t}),\n\t\t\t\trequired: true,\n\t\t\t\tadmin: {\n\t\t\t\t\twidth: \"50%\",\n\t\t\t\t\tcomponents: {\n\t\t\t\t\t\tField: \"./index\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\t...props,\n\t};\n}\n",
      "type": "registry:file",
      "target": "src/payload/fields/socialLinks/config.ts"
    },
    {
      "path": "registry/payload/fields/socialLinks/admin/SocialLinksField.tsx",
      "content": "\"use client\";\n\nimport {\n\tsocialIcons,\n\ttype SocialIconKey,\n} from \"@/registry/default/ui/icons/social-icons\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport type { OptionObject, SelectFieldClientProps } from \"payload\";\nimport { useField } from \"@payloadcms/ui\";\nimport {\n\tCommand,\n\tCommandEmpty,\n\tCommandGroup,\n\tCommandInput,\n\tCommandItem,\n\tCommandList,\n} from \"@/registry/default/ui/command\";\nimport SocialIcon from \"@/registry/default/ui/icons/social-icon\";\n\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/registry/default/ui/popover\";\nimport { cn } from \"@/registry/default/utils\";\nimport { useState, type Dispatch, type SetStateAction } from \"react\";\nimport { Button } from \"@/registry/default/ui/button\";\n\nfunction SocialIconKey({\n\ticon,\n\tindex,\n\tvalue,\n\tsetValue,\n\tsetOpen,\n}: {\n\ticon: OptionObject;\n\tindex: number;\n\tvalue: SocialIconKey;\n\tsetValue: (val: unknown, disableModifyingForm?: boolean) => void;\n\tsetOpen: Dispatch<SetStateAction<boolean>>;\n}) {\n\treturn (\n\t\t<CommandItem\n\t\t\tvalue={icon.value}\n\t\t\tonSelect={(currentValue) => {\n\t\t\t\tsetValue(currentValue === value ? \"\" : currentValue);\n\t\t\t\tsetOpen(false);\n\t\t\t}}\n\t\t\tkey={`${index}-${icon.value}`}\n\t\t\tclassName=\"cursor-pointer transition-colors duration-400 hover:bg-neutral-300\"\n\t\t>\n\t\t\t<SocialIcon icon={icon.value as SocialIconKey} />\n\t\t\t{icon.value}\n\t\t\t<Check\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"ml-auto opacity-0\",\n\t\t\t\t\tvalue === icon.label && \"opacity-100\",\n\t\t\t\t)}\n\t\t\t/>\n\t\t</CommandItem>\n\t);\n}\n\nexport default function SocialIconField({\n\tfield,\n\tpath,\n}: SelectFieldClientProps) {\n\tconst { value, setValue } = useField<SocialIconKey>({ path });\n\tconst [open, setOpen] = useState(false);\n\tconst selectIcon = socialIcons[value];\n\n\treturn (\n\t\t<div className=\"\">\n\t\t\t<label>\n\t\t\t\t{field.label as string}\n\t\t\t\t{field.required ? <span className=\"pl-1 text-red-500\">*</span> : \"\"}\n\t\t\t</label>\n\t\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t\t<PopoverTrigger asChild className=\"mt-2 w-full cursor-pointer\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\trole=\"combobox\"\n\t\t\t\t\t\taria-expanded={open}\n\t\t\t\t\t\tclassName=\"justify-between\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{selectIcon && <SocialIcon icon={value} />}\n\t\t\t\t\t\t{value ? value : \"Find Social Link...\"}\n\t\t\t\t\t\t<ChevronsUpDown className=\"opacity-50\" />\n\t\t\t\t\t</Button>\n\t\t\t\t</PopoverTrigger>\n\t\t\t\t<PopoverContent className=\"w-[var(--radix-popover-trigger-width)] bg-neutral-200 dark:bg-neutral-600\">\n\t\t\t\t\t<Command value={value}>\n\t\t\t\t\t\t<CommandInput\n\t\t\t\t\t\t\tplaceholder=\"Search Icons...\"\n\t\t\t\t\t\t\tclassName=\"border-none\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t\t<CommandEmpty>No Icons Found.</CommandEmpty>\n\t\t\t\t\t\t\t<CommandGroup>\n\t\t\t\t\t\t\t\t{field.options.map((socialIcon, index) => (\n\t\t\t\t\t\t\t\t\t<SocialIconKey\n\t\t\t\t\t\t\t\t\t\tkey={`${index}-${(socialIcon as OptionObject).value}`}\n\t\t\t\t\t\t\t\t\t\ticon={socialIcon as OptionObject}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\t\tsetValue={setValue}\n\t\t\t\t\t\t\t\t\t\tsetOpen={setOpen}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t</CommandList>\n\t\t\t\t\t</Command>\n\t\t\t\t</PopoverContent>\n\t\t\t</Popover>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component",
      "target": "src/payload/fields/socialLinks/admin/SocialLinksField.tsx"
    },
    {
      "path": "registry/payload/fields/socialLinks/index.tsx",
      "content": "import Link from \"next/link\";\nimport {\n\tsocialIcons,\n\ttype SocialIconKey,\n} from \"@/registry/default/ui/icons/social-icons\";\nimport Image, { type ImageProps } from \"next/image\";\nimport { cn } from \"@/registry/default/utils\";\n\nexport default function SocialIcon({\n\ticon,\n\thref = \"\",\n\tclassName,\n\t...imageProps\n}: {\n\ticon: SocialIconKey;\n\thref?: string;\n} & Partial<ImageProps>) {\n\tconst selectIcon = socialIcons[icon];\n\tif (!selectIcon?.route || selectIcon.route === \"\") {\n\t\tconsole.log(\"social icon not found: \", icon);\n\t\treturn <></>;\n\t}\n\n\treturn (\n\t\t<Link href={href}>\n\t\t\t{typeof selectIcon.route !== \"string\" &&\n\t\t\t\tObject.hasOwn(selectIcon.route, \"light\") && (\n\t\t\t\t\t<Image\n\t\t\t\t\t\tsrc={selectIcon.route.light}\n\t\t\t\t\t\talt={`${icon}`}\n\t\t\t\t\t\twidth={20}\n\t\t\t\t\t\theight={20}\n\t\t\t\t\t\tclassName={cn(\"dark:hidden\", className)}\n\t\t\t\t\t\t{...imageProps}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t{typeof selectIcon.route !== \"string\" &&\n\t\t\t\tObject.hasOwn(selectIcon.route, \"dark\") && (\n\t\t\t\t\t<Image\n\t\t\t\t\t\tsrc={selectIcon.route.dark}\n\t\t\t\t\t\talt={`${icon}`}\n\t\t\t\t\t\twidth={20}\n\t\t\t\t\t\theight={20}\n\t\t\t\t\t\tclassName={cn(\"hidden dark:block\", className)}\n\t\t\t\t\t\t{...imageProps}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t{typeof selectIcon.route === \"string\" && (\n\t\t\t\t<Image\n\t\t\t\t\tsrc={selectIcon.route}\n\t\t\t\t\talt={`${icon}`}\n\t\t\t\t\twidth={20}\n\t\t\t\t\theight={20}\n\t\t\t\t\tclassName={className}\n\t\t\t\t\t{...imageProps}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</Link>\n\t);\n}\n",
      "type": "registry:component",
      "target": "src/payload/fields/socialLinks/index.tsx"
    }
  ]
}